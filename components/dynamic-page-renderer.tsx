'use client';

import React from 'react';
import { BevGeniePage, PageSection } from '@/lib/ai/page-specs';
import { Download, Share2, ExternalLink } from 'lucide-react';

interface DynamicPageRendererProps {
  page: BevGeniePage;
  onDownload?: () => void;
  onShare?: () => void;
  compact?: boolean; // For displaying in chat vs full page
}

/**
 * Dynamic Page Renderer
 *
 * Converts BevGenie page specifications (JSON) into rendered React components.
 * Supports 6 page types and 8 section types with consistent styling.
 */
export function DynamicPageRenderer({
  page,
  onDownload,
  onShare,
  compact = false,
}: DynamicPageRendererProps) {
  return (
    <div className={`dynamic-page-renderer ${compact ? 'compact' : 'full'}`}>
      {/* Header with title and actions */}
      {!compact && (
        <div className="page-header bg-gradient-to-r from-blue-50 to-indigo-50 border-b border-gray-200 p-6 mb-6">
          <div className="flex items-start justify-between mb-3">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">{page.title}</h1>
              <p className="text-gray-600 mt-2">{page.description}</p>
            </div>
            {(onDownload || onShare) && (
              <div className="flex gap-2">
                {onDownload && (
                  <button
                    onClick={onDownload}
                    className="flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                    title="Download as PDF"
                  >
                    <Download className="w-4 h-4" />
                    <span className="text-sm font-medium hidden sm:inline">Download</span>
                  </button>
                )}
                {onShare && (
                  <button
                    onClick={onShare}
                    className="flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                    title="Share this page"
                  >
                    <Share2 className="w-4 h-4" />
                    <span className="text-sm font-medium hidden sm:inline">Share</span>
                  </button>
                )}
              </div>
            )}
          </div>
          <div className="flex gap-2 mt-4 flex-wrap">
            <span className="inline-block px-3 py-1 bg-blue-100 text-blue-800 text-xs font-semibold rounded-full">
              {page.type.replace(/_/g, ' ')}
            </span>
            <span className="inline-block px-3 py-1 bg-indigo-100 text-indigo-800 text-xs font-semibold rounded-full">
              BevGenie Solution
            </span>
          </div>
        </div>
      )}

      {/* Render sections */}
      <div className={`page-content space-y-8 ${compact ? 'max-w-2xl' : ''}`}>
        {page.sections.map((section, index) => (
          <SectionRenderer key={index} section={section} index={index} />
        ))}
      </div>

      {/* Footer in full view */}
      {!compact && (
        <div className="page-footer bg-gradient-to-r from-gray-50 to-gray-100 border-t border-gray-200 p-6 mt-8 text-center">
          <p className="text-sm text-gray-600">
            Generated by{' '}
            <span className="font-semibold text-blue-600">BevGenie AI</span>
            <br />
            Personalized for your beverage business needs
          </p>
        </div>
      )}
    </div>
  );
}

/**
 * Section Renderer
 * Routes to appropriate section component based on section type
 */
function SectionRenderer({ section, index }: { section: PageSection; index: number }) {
  switch (section.type) {
    case 'hero':
      return <HeroSection section={section} />;
    case 'feature_grid':
      return <FeatureGridSection section={section} />;
    case 'testimonial':
      return <TestimonialSection section={section} />;
    case 'comparison_table':
      return <ComparisonTableSection section={section} />;
    case 'cta':
      return <CTASection section={section} />;
    case 'faq':
      return <FAQSection section={section} />;
    case 'metrics':
      return <MetricsSection section={section} />;
    case 'steps':
      return <StepsSection section={section} />;
    default:
      return (
        <div className="p-4 bg-red-50 border border-red-200 rounded-lg text-red-800">
          Unknown section type: {(section as any).type}
        </div>
      );
  }
}

/**
 * Hero Section Component
 * Large headline with optional CTA button
 */
function HeroSection({ section }: { section: any }) {
  return (
    <div className="hero-section bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-12 rounded-lg shadow-lg">
      <h2 className="text-4xl md:text-5xl font-bold mb-4">{section.headline}</h2>
      {section.subheadline && <p className="text-xl md:text-2xl text-blue-100 mb-8">{section.subheadline}</p>}
      {section.ctaButton && (
        <button className="mt-6 px-8 py-3 bg-white text-blue-600 font-bold rounded-lg hover:bg-blue-50 transition-colors shadow-md">
          {section.ctaButton.text}
        </button>
      )}
    </div>
  );
}

/**
 * Feature Grid Section Component
 * Grid of features with icons and descriptions
 */
function FeatureGridSection({ section }: { section: any }) {
  return (
    <div className="feature-grid-section">
      {section.title && <h3 className="text-2xl font-bold text-gray-900 mb-2">{section.title}</h3>}
      {section.subtitle && <p className="text-gray-600 mb-8">{section.subtitle}</p>}

      <div
        className={`grid grid-cols-1 md:grid-cols-${section.columns} gap-6`}
        style={{
          gridTemplateColumns: `repeat(${Math.min(section.columns, 3)}, minmax(0, 1fr))`,
        }}
      >
        {section.features.map((feature: any, idx: number) => (
          <div
            key={idx}
            className="feature-card p-6 bg-white border border-gray-200 rounded-lg hover:shadow-lg transition-shadow"
          >
            {feature.icon && (
              <div className="text-3xl mb-3">{feature.icon}</div>
            )}
            <h4 className="text-lg font-semibold text-gray-900 mb-2">{feature.title}</h4>
            <p className="text-gray-600 text-sm">{feature.description}</p>
          </div>
        ))}
      </div>
    </div>
  );
}

/**
 * Testimonial Section Component
 * Customer quote with attribution
 */
function TestimonialSection({ section }: { section: any }) {
  return (
    <div className="testimonial-section">
      <div className="bg-blue-50 border-l-4 border-blue-600 p-8 rounded-lg">
        <div className="flex items-start gap-4">
          {section.image && (
            <img
              src={section.image}
              alt={section.author}
              className="w-16 h-16 rounded-full object-cover flex-shrink-0"
            />
          )}
          <div className="flex-grow">
            <blockquote className="text-lg italic text-gray-800 mb-4">
              "{section.quote}"
            </blockquote>
            <div>
              <p className="font-semibold text-gray-900">{section.author}</p>
              {section.role && (
                <p className="text-sm text-gray-600">{section.role}</p>
              )}
              {section.company && (
                <p className="text-sm text-gray-600">{section.company}</p>
              )}
              {section.metric && (
                <p className="text-sm font-semibold text-green-600 mt-2">
                  {section.metric}
                </p>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

/**
 * Comparison Table Section Component
 * Feature-by-feature comparison matrix
 */
function ComparisonTableSection({ section }: { section: any }) {
  return (
    <div className="comparison-table-section">
      {section.title && <h3 className="text-2xl font-bold text-gray-900 mb-6">{section.title}</h3>}

      <div className="overflow-x-auto">
        <table className="w-full border-collapse">
          <thead>
            <tr className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white">
              {section.headers.map((header: string, idx: number) => (
                <th
                  key={idx}
                  className="px-6 py-4 text-left font-semibold border border-gray-300"
                >
                  {header}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {section.rows.map((row: any, rowIdx: number) => (
              <tr
                key={rowIdx}
                className={rowIdx % 2 === 0 ? 'bg-white' : 'bg-gray-50'}
              >
                <td className="px-6 py-4 font-semibold text-gray-900 border border-gray-300">
                  {row.feature}
                </td>
                {row.values.map((value: any, colIdx: number) => (
                  <td
                    key={colIdx}
                    className="px-6 py-4 text-gray-700 border border-gray-300 text-center"
                  >
                    {typeof value === 'boolean' ? (
                      value ? (
                        <span className="text-green-600 font-bold">✓</span>
                      ) : (
                        <span className="text-red-600 font-bold">✗</span>
                      )
                    ) : (
                      value
                    )}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

/**
 * CTA Section Component
 * Call-to-action buttons with various actions
 */
function CTASection({ section }: { section: any }) {
  const bgColorMap: Record<string, string> = {
    blue: 'bg-gradient-to-r from-blue-600 to-blue-700',
    green: 'bg-gradient-to-r from-green-600 to-green-700',
    purple: 'bg-gradient-to-r from-purple-600 to-purple-700',
  };

  const bgColor = bgColorMap[section.backgroundColor || 'blue'] || bgColorMap.blue;

  return (
    <div className={`cta-section ${bgColor} text-white p-12 rounded-lg shadow-lg text-center`}>
      <h3 className="text-3xl font-bold mb-3">{section.title}</h3>
      {section.description && (
        <p className="text-lg text-blue-100 mb-8 max-w-2xl mx-auto">
          {section.description}
        </p>
      )}

      <div className="flex flex-wrap gap-4 justify-center mt-8">
        {section.buttons.map((button: any, idx: number) => (
          <button
            key={idx}
            className={`px-8 py-3 font-semibold rounded-lg transition-all ${
              button.primary
                ? 'bg-white text-blue-600 hover:bg-blue-50 shadow-md hover:shadow-lg'
                : 'bg-blue-700 text-white border-2 border-white hover:bg-blue-800'
            }`}
          >
            {button.text}
          </button>
        ))}
      </div>
    </div>
  );
}

/**
 * FAQ Section Component
 * Accordion-style frequently asked questions
 */
function FAQSection({ section }: { section: any }) {
  const [expandedIndex, setExpandedIndex] = React.useState<number | null>(null);

  return (
    <div className="faq-section">
      {section.title && <h3 className="text-2xl font-bold text-gray-900 mb-6">{section.title}</h3>}

      <div className="space-y-3">
        {section.items.map((item: any, idx: number) => (
          <div
            key={idx}
            className="bg-white border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-shadow"
          >
            <button
              onClick={() =>
                setExpandedIndex(expandedIndex === idx ? null : idx)
              }
              className="w-full px-6 py-4 text-left font-semibold text-gray-900 bg-gray-50 hover:bg-gray-100 flex items-center justify-between transition-colors"
            >
              {item.question}
              <span className={`transform transition-transform ${expandedIndex === idx ? 'rotate-180' : ''}`}>
                ▼
              </span>
            </button>
            {expandedIndex === idx && (
              <div className="px-6 py-4 text-gray-700 bg-white border-t border-gray-200">
                {item.answer}
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
}

/**
 * Metrics Section Component
 * Display key metrics and statistics
 */
function MetricsSection({ section }: { section: any }) {
  return (
    <div className="metrics-section">
      {section.title && <h3 className="text-2xl font-bold text-gray-900 mb-8">{section.title}</h3>}

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {section.metrics.map((metric: any, idx: number) => (
          <div
            key={idx}
            className="metric-card bg-gradient-to-br from-blue-50 to-indigo-50 border border-blue-200 p-8 rounded-lg text-center"
          >
            <div className="text-4xl font-bold text-blue-600 mb-2">
              {metric.value}
            </div>
            <p className="text-lg font-semibold text-gray-900 mb-2">
              {metric.label}
            </p>
            {metric.description && (
              <p className="text-sm text-gray-600">{metric.description}</p>
            )}
          </div>
        ))}
      </div>
    </div>
  );
}

/**
 * Steps Section Component
 * Implementation or process steps with timeline
 */
function StepsSection({ section }: { section: any }) {
  return (
    <div className="steps-section">
      {section.title && <h3 className="text-2xl font-bold text-gray-900 mb-2">{section.title}</h3>}
      {section.timeline && (
        <p className="text-lg font-semibold text-blue-600 mb-8">
          Timeline: {section.timeline}
        </p>
      )}

      <div className="relative">
        {/* Vertical line */}
        <div className="absolute left-6 top-0 bottom-0 w-1 bg-gradient-to-b from-blue-600 to-indigo-600 hidden md:block" />

        {/* Steps */}
        <div className="space-y-8">
          {section.steps.map((step: any, idx: number) => (
            <div key={idx} className="flex gap-6">
              <div className="flex-shrink-0">
                <div className="flex items-center justify-center w-12 h-12 rounded-full bg-gradient-to-r from-blue-600 to-indigo-600 text-white font-bold text-lg shadow-lg">
                  {step.number}
                </div>
              </div>
              <div className="flex-grow pt-2">
                <h4 className="text-lg font-semibold text-gray-900 mb-2">
                  {step.title}
                </h4>
                <p className="text-gray-600">{step.description}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
